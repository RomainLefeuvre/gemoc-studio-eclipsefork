/*
 * generated by Xtext 2.12.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.gemoc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.gemoc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.gemoc.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Dsl";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDsl
entryRuleDsl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDslRule()); }
	iv_ruleDsl=ruleDsl
	{ $current=$iv_ruleDsl.current; }
	EOF;

// Rule Dsl
ruleDsl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_SPACE_0=RULE_SPACE
			{
				newLeafNode(this_SPACE_0, grammarAccess.getDslAccess().getSPACETerminalRuleCall_0());
			}
		)*
		otherlv_1='name'
		{
			newLeafNode(otherlv_1, grammarAccess.getDslAccess().getNameKeyword_1());
		}
		(
			this_SPACE_2=RULE_SPACE
			{
				newLeafNode(this_SPACE_2, grammarAccess.getDslAccess().getSPACETerminalRuleCall_2());
			}
		)*
		this_SEPARATOR_3=RULE_SEPARATOR
		{
			newLeafNode(this_SEPARATOR_3, grammarAccess.getDslAccess().getSEPARATORTerminalRuleCall_3());
		}
		(
			this_SPACE_4=RULE_SPACE
			{
				newLeafNode(this_SPACE_4, grammarAccess.getDslAccess().getSPACETerminalRuleCall_4());
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getDslAccess().getNameMULTILINEParserRuleCall_5_0());
				}
				lv_name_5_0=ruleMULTILINE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDslRule());
					}
					set(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.gemoc.Dsl.MULTILINE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_SPACE_6=RULE_SPACE
			{
				newLeafNode(this_SPACE_6, grammarAccess.getDslAccess().getSPACETerminalRuleCall_6());
			}
		)*
		(
			otherlv_7='\n'
			{
				newLeafNode(otherlv_7, grammarAccess.getDslAccess().getLineFeedKeyword_7());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDslAccess().getEntriesEntryParserRuleCall_8_0());
				}
				lv_entries_8_0=ruleEntry
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDslRule());
					}
					add(
						$current,
						"entries",
						lv_entries_8_0,
						"org.eclipse.gemoc.Dsl.Entry");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEntry
entryRuleEntry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntryRule()); }
	iv_ruleEntry=ruleEntry
	{ $current=$iv_ruleEntry.current; }
	EOF;

// Rule Entry
ruleEntry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_SPACE_0=RULE_SPACE
			{
				newLeafNode(this_SPACE_0, grammarAccess.getEntryAccess().getSPACETerminalRuleCall_0());
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getEntryAccess().getKeyWORDParserRuleCall_1_0());
				}
				lv_key_1_0=ruleWORD
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntryRule());
					}
					set(
						$current,
						"key",
						lv_key_1_0,
						"org.eclipse.gemoc.Dsl.WORD");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_SPACE_2=RULE_SPACE
			{
				newLeafNode(this_SPACE_2, grammarAccess.getEntryAccess().getSPACETerminalRuleCall_2());
			}
		)*
		this_SEPARATOR_3=RULE_SEPARATOR
		{
			newLeafNode(this_SEPARATOR_3, grammarAccess.getEntryAccess().getSEPARATORTerminalRuleCall_3());
		}
		(
			this_SPACE_4=RULE_SPACE
			{
				newLeafNode(this_SPACE_4, grammarAccess.getEntryAccess().getSPACETerminalRuleCall_4());
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getEntryAccess().getValueMULTILINEParserRuleCall_5_0());
				}
				lv_value_5_0=ruleMULTILINE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntryRule());
					}
					set(
						$current,
						"value",
						lv_value_5_0,
						"org.eclipse.gemoc.Dsl.MULTILINE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_SPACE_6=RULE_SPACE
			{
				newLeafNode(this_SPACE_6, grammarAccess.getEntryAccess().getSPACETerminalRuleCall_6());
			}
		)*
		(
			otherlv_7='\n'
			{
				newLeafNode(otherlv_7, grammarAccess.getEntryAccess().getLineFeedKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleWORD
entryRuleWORD returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWORDRule()); }
	iv_ruleWORD=ruleWORD
	{ $current=$iv_ruleWORD.current.getText(); }
	EOF;

// Rule WORD
ruleWORD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_LETTER_0=RULE_LETTER
		{
			$current.merge(this_LETTER_0);
		}
		{
			newLeafNode(this_LETTER_0, grammarAccess.getWORDAccess().getLETTERTerminalRuleCall_0());
		}
		(
			(
				this_LETTER_1=RULE_LETTER
				{
					$current.merge(this_LETTER_1);
				}
				{
					newLeafNode(this_LETTER_1, grammarAccess.getWORDAccess().getLETTERTerminalRuleCall_1_0_0());
				}
				    |
				this_SPACE_2=RULE_SPACE
				{
					$current.merge(this_SPACE_2);
				}
				{
					newLeafNode(this_SPACE_2, grammarAccess.getWORDAccess().getSPACETerminalRuleCall_1_0_1());
				}
			)*
			(
				(RULE_LETTER)=>
				this_LETTER_3=RULE_LETTER
				{
					$current.merge(this_LETTER_3);
				}
				{
					newLeafNode(this_LETTER_3, grammarAccess.getWORDAccess().getLETTERTerminalRuleCall_1_1());
				}
			)
		)?
	)
;

// Entry rule entryRuleVALUE_WORD
entryRuleVALUE_WORD returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVALUE_WORDRule()); }
	iv_ruleVALUE_WORD=ruleVALUE_WORD
	{ $current=$iv_ruleVALUE_WORD.current.getText(); }
	EOF;

// Rule VALUE_WORD
ruleVALUE_WORD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_LETTER_0=RULE_LETTER
			{
				$current.merge(this_LETTER_0);
			}
			{
				newLeafNode(this_LETTER_0, grammarAccess.getVALUE_WORDAccess().getLETTERTerminalRuleCall_0_0());
			}
			    |
			this_SEPARATOR_1=RULE_SEPARATOR
			{
				$current.merge(this_SEPARATOR_1);
			}
			{
				newLeafNode(this_SEPARATOR_1, grammarAccess.getVALUE_WORDAccess().getSEPARATORTerminalRuleCall_0_1());
			}
		)
		(
			(
				(
					this_LETTER_2=RULE_LETTER
					{
						$current.merge(this_LETTER_2);
					}
					{
						newLeafNode(this_LETTER_2, grammarAccess.getVALUE_WORDAccess().getLETTERTerminalRuleCall_1_0_0_0());
					}
					    |
					this_SEPARATOR_3=RULE_SEPARATOR
					{
						$current.merge(this_SEPARATOR_3);
					}
					{
						newLeafNode(this_SEPARATOR_3, grammarAccess.getVALUE_WORDAccess().getSEPARATORTerminalRuleCall_1_0_0_1());
					}
				)
				    |
				this_SPACE_4=RULE_SPACE
				{
					$current.merge(this_SPACE_4);
				}
				{
					newLeafNode(this_SPACE_4, grammarAccess.getVALUE_WORDAccess().getSPACETerminalRuleCall_1_0_1());
				}
			)*
			(
				(RULE_LETTER | RULE_SEPARATOR)=>
				(
					this_LETTER_5=RULE_LETTER
					{
						$current.merge(this_LETTER_5);
					}
					{
						newLeafNode(this_LETTER_5, grammarAccess.getVALUE_WORDAccess().getLETTERTerminalRuleCall_1_1_0_0());
					}
					    |
					this_SEPARATOR_6=RULE_SEPARATOR
					{
						$current.merge(this_SEPARATOR_6);
					}
					{
						newLeafNode(this_SEPARATOR_6, grammarAccess.getVALUE_WORDAccess().getSEPARATORTerminalRuleCall_1_1_0_1());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleMULTILINE
entryRuleMULTILINE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMULTILINERule()); }
	iv_ruleMULTILINE=ruleMULTILINE
	{ $current=$iv_ruleMULTILINE.current.getText(); }
	EOF;

// Rule MULTILINE
ruleMULTILINE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMULTILINEAccess().getVALUE_WORDParserRuleCall_0());
		}
		this_VALUE_WORD_0=ruleVALUE_WORD
		{
			$current.merge(this_VALUE_WORD_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='\\\n'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getMULTILINEAccess().getReverseSolidusControl000aKeyword_1_0());
			}
			(
				this_SPACE_2=RULE_SPACE
				{
					$current.merge(this_SPACE_2);
				}
				{
					newLeafNode(this_SPACE_2, grammarAccess.getMULTILINEAccess().getSPACETerminalRuleCall_1_1());
				}
			)*
			{
				newCompositeNode(grammarAccess.getMULTILINEAccess().getVALUE_WORDParserRuleCall_1_2());
			}
			this_VALUE_WORD_3=ruleVALUE_WORD
			{
				$current.merge(this_VALUE_WORD_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

RULE_SEPARATOR : ('='|':');

RULE_SL_COMMENT : ('!'|'#') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_LETTER : (~((RULE_SEPARATOR|RULE_SPACE|'\\\n'|'\r'|'\n'))|'\\='|'\\:'|'\\#'|'\\!');

RULE_SPACE : (' '|'\t');
