/*
 * generated by Xtext 2.12.0
 */
package org.eclipse.gemoc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.Dsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSEPARATORTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameMULTILINEParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cLineFeedKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cEntriesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEntriesEntryParserRuleCall_8_0 = (RuleCall)cEntriesAssignment_8.eContents().get(0);
		
		//Dsl:
		//	SPACE* 'name' SPACE* SEPARATOR SPACE* name=MULTILINE SPACE* '\n'?
		//	entries+=Entry*;
		@Override public ParserRule getRule() { return rule; }
		
		//SPACE* 'name' SPACE* SEPARATOR SPACE* name=MULTILINE SPACE* '\n'? entries+=Entry*
		public Group getGroup() { return cGroup; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_0() { return cSPACETerminalRuleCall_0; }
		
		//'name'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_2() { return cSPACETerminalRuleCall_2; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_3() { return cSEPARATORTerminalRuleCall_3; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_4() { return cSPACETerminalRuleCall_4; }
		
		//name=MULTILINE
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//MULTILINE
		public RuleCall getNameMULTILINEParserRuleCall_5_0() { return cNameMULTILINEParserRuleCall_5_0; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_6() { return cSPACETerminalRuleCall_6; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_7() { return cLineFeedKeyword_7; }
		
		//entries+=Entry*
		public Assignment getEntriesAssignment_8() { return cEntriesAssignment_8; }
		
		//Entry
		public RuleCall getEntriesEntryParserRuleCall_8_0() { return cEntriesEntryParserRuleCall_8_0; }
	}
	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyWORDParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSEPARATORTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSPACETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueMULTILINEParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cLineFeedKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Entry:
		//	SPACE* key=WORD SPACE* SEPARATOR SPACE* value=MULTILINE SPACE* '\n'?;
		@Override public ParserRule getRule() { return rule; }
		
		//SPACE* key=WORD SPACE* SEPARATOR SPACE* value=MULTILINE SPACE* '\n'?
		public Group getGroup() { return cGroup; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_0() { return cSPACETerminalRuleCall_0; }
		
		//key=WORD
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//WORD
		public RuleCall getKeyWORDParserRuleCall_1_0() { return cKeyWORDParserRuleCall_1_0; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_2() { return cSPACETerminalRuleCall_2; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_3() { return cSEPARATORTerminalRuleCall_3; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_4() { return cSPACETerminalRuleCall_4; }
		
		//value=MULTILINE
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//MULTILINE
		public RuleCall getValueMULTILINEParserRuleCall_5_0() { return cValueMULTILINEParserRuleCall_5_0; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_6() { return cSPACETerminalRuleCall_6; }
		
		//'\n'?
		public Keyword getLineFeedKeyword_7() { return cLineFeedKeyword_7; }
	}
	public class WORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.WORD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cLETTERTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		///*
		// * Start and finish with a letter. Can contain spaces.  
		// */ WORD:
		//	LETTER ((LETTER | SPACE)* -> LETTER)?;
		@Override public ParserRule getRule() { return rule; }
		
		//LETTER ((LETTER | SPACE)* -> LETTER)?
		public Group getGroup() { return cGroup; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0() { return cLETTERTerminalRuleCall_0; }
		
		//((LETTER | SPACE)* -> LETTER)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(LETTER | SPACE)*
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_1_0_0() { return cLETTERTerminalRuleCall_1_0_0; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_1_0_1() { return cSPACETerminalRuleCall_1_0_1; }
		
		//-> LETTER
		public RuleCall getLETTERTerminalRuleCall_1_1() { return cLETTERTerminalRuleCall_1_1; }
	}
	public class VALUE_WORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.VALUE_WORD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLETTERTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSEPARATORTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cLETTERTerminalRuleCall_1_0_0_0 = (RuleCall)cAlternatives_1_0_0.eContents().get(0);
		private final RuleCall cSEPARATORTerminalRuleCall_1_0_0_1 = (RuleCall)cAlternatives_1_0_0.eContents().get(1);
		private final RuleCall cSPACETerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final RuleCall cLETTERTerminalRuleCall_1_1_0_0 = (RuleCall)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cSEPARATORTerminalRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		
		///*
		// * A WORD that may contain ':' and '='
		// */ VALUE_WORD:
		//	(LETTER | SEPARATOR) (((LETTER | SEPARATOR) | SPACE)* -> (LETTER | SEPARATOR))?;
		@Override public ParserRule getRule() { return rule; }
		
		//(LETTER | SEPARATOR) (((LETTER | SEPARATOR) | SPACE)* -> (LETTER | SEPARATOR))?
		public Group getGroup() { return cGroup; }
		
		//LETTER | SEPARATOR
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0_0() { return cLETTERTerminalRuleCall_0_0; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_0_1() { return cSEPARATORTerminalRuleCall_0_1; }
		
		//(((LETTER | SEPARATOR) | SPACE)* -> (LETTER | SEPARATOR))?
		public Group getGroup_1() { return cGroup_1; }
		
		//((LETTER | SEPARATOR) | SPACE)*
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//(LETTER | SEPARATOR)
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_1_0_0_0() { return cLETTERTerminalRuleCall_1_0_0_0; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_1_0_0_1() { return cSEPARATORTerminalRuleCall_1_0_0_1; }
		
		//SPACE
		public RuleCall getSPACETerminalRuleCall_1_0_1() { return cSPACETerminalRuleCall_1_0_1; }
		
		//-> (LETTER | SEPARATOR)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//LETTER | SEPARATOR
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_1_1_0_0() { return cLETTERTerminalRuleCall_1_1_0_0; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_1_1_0_1() { return cSEPARATORTerminalRuleCall_1_1_0_1; }
	}
	public class MULTILINEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.MULTILINE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVALUE_WORDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cReverseSolidusControl000aKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSPACETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cVALUE_WORDParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		///*
		// * VALUE_WORD splited on severals lines.
		// * Starting spaces are ignored for each new lines (see DslValueConverter)
		// */ MULTILINE:
		//	VALUE_WORD ('\\\n' SPACE* VALUE_WORD)*;
		@Override public ParserRule getRule() { return rule; }
		
		//VALUE_WORD ('\\\n' SPACE* VALUE_WORD)*
		public Group getGroup() { return cGroup; }
		
		//VALUE_WORD
		public RuleCall getVALUE_WORDParserRuleCall_0() { return cVALUE_WORDParserRuleCall_0; }
		
		//('\\\n' SPACE* VALUE_WORD)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'\\\n'
		public Keyword getReverseSolidusControl000aKeyword_1_0() { return cReverseSolidusControl000aKeyword_1_0; }
		
		//SPACE*
		public RuleCall getSPACETerminalRuleCall_1_1() { return cSPACETerminalRuleCall_1_1; }
		
		//VALUE_WORD
		public RuleCall getVALUE_WORDParserRuleCall_1_2() { return cVALUE_WORDParserRuleCall_1_2; }
	}
	
	
	private final DslElements pDsl;
	private final EntryElements pEntry;
	private final WORDElements pWORD;
	private final VALUE_WORDElements pVALUE_WORD;
	private final TerminalRule tSEPARATOR;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tLETTER;
	private final MULTILINEElements pMULTILINE;
	private final TerminalRule tSPACE;
	
	private final Grammar grammar;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pDsl = new DslElements();
		this.pEntry = new EntryElements();
		this.pWORD = new WORDElements();
		this.pVALUE_WORD = new VALUE_WORDElements();
		this.tSEPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.SEPARATOR");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.SL_COMMENT");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.LETTER");
		this.pMULTILINE = new MULTILINEElements();
		this.tSPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.Dsl.SPACE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gemoc.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Dsl:
	//	SPACE* 'name' SPACE* SEPARATOR SPACE* name=MULTILINE SPACE* '\n'?
	//	entries+=Entry*;
	public DslElements getDslAccess() {
		return pDsl;
	}
	
	public ParserRule getDslRule() {
		return getDslAccess().getRule();
	}
	
	//Entry:
	//	SPACE* key=WORD SPACE* SEPARATOR SPACE* value=MULTILINE SPACE* '\n'?;
	public EntryElements getEntryAccess() {
		return pEntry;
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}
	
	///*
	// * Start and finish with a letter. Can contain spaces.  
	// */ WORD:
	//	LETTER ((LETTER | SPACE)* -> LETTER)?;
	public WORDElements getWORDAccess() {
		return pWORD;
	}
	
	public ParserRule getWORDRule() {
		return getWORDAccess().getRule();
	}
	
	///*
	// * A WORD that may contain ':' and '='
	// */ VALUE_WORD:
	//	(LETTER | SEPARATOR) (((LETTER | SEPARATOR) | SPACE)* -> (LETTER | SEPARATOR))?;
	public VALUE_WORDElements getVALUE_WORDAccess() {
		return pVALUE_WORD;
	}
	
	public ParserRule getVALUE_WORDRule() {
		return getVALUE_WORDAccess().getRule();
	}
	
	//terminal SEPARATOR:
	//	'=' | ':';
	public TerminalRule getSEPARATORRule() {
		return tSEPARATOR;
	}
	
	//terminal SL_COMMENT:
	//	('!' | '#') !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal LETTER:
	//	!(SEPARATOR | SPACE | '\\\n' | '\r' | '\n') | '\\=' | '\\:' | '\\#' | '\\!';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	///*
	// * VALUE_WORD splited on severals lines.
	// * Starting spaces are ignored for each new lines (see DslValueConverter)
	// */ MULTILINE:
	//	VALUE_WORD ('\\\n' SPACE* VALUE_WORD)*;
	public MULTILINEElements getMULTILINEAccess() {
		return pMULTILINE;
	}
	
	public ParserRule getMULTILINERule() {
		return getMULTILINEAccess().getRule();
	}
	
	//terminal SPACE:
	//	' ' | '\t';
	public TerminalRule getSPACERule() {
		return tSPACE;
	}
}
